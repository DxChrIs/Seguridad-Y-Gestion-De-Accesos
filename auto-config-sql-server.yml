---
- name: Setup MySQL Server with Advanced Configuration and Security
  hosts: all
  become: yes

  tasks:
    - name: Instalar dependencias necesarias
      apt:
        name:
          - python3-pymysql
          - mysql-server
          - fail2ban
        state: present
        update_cache: yes

    - name: Habilitar y arrancar MySQL
      service:
        name: mysql
        state: started
        enabled: yes

    - name: Esperar a que el socket de MySQL esté disponible
      wait_for:
        path: /var/run/mysqld/mysqld.sock
        state: present
        timeout: 15

    - name: Configurar root con contraseña y plugin mysql_native_password
      shell: mysql -u root -p'ElAdmin1853' -S /var/run/mysqld/mysqld.sock -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'ElAdmin1853'; FLUSH PRIVILEGES;"

    - name: Crear base de datos "testdb"
      mysql_db:
        name: testdb
        state: present
        login_user: root
        login_password: "ElAdmin1853"

    - name: Crear tabla "users" en "testdb"
      mysql_query:
        query: |
          CREATE TABLE IF NOT EXISTS testdb.users (
            id INT AUTO_INCREMENT PRIMARY KEY,
            name VARCHAR(100) NOT NULL,
            email VARCHAR(100) NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
        login_user: root
        login_password: "ElAdmin1853"

    - name: Insertar datos de prueba en "users"
      mysql_query:
        query: |
          INSERT INTO testdb.users (name, email)
          VALUES ('John Doe', 'john.doe@example.com'),
                  ('Jane Smith', 'jane.smith@example.com'),
                  ('Emily Johnson', 'emily.johnson@example.com');
        login_user: root
        login_password: "ElAdmin1853"

    - name: Crear base de datos "mydb"
      mysql_db:
        name: mydb
        state: present
        login_user: root
        login_password: "ElAdmin1853"

    - name: Crear usuarios con diferentes privilegios
      mysql_user:
        name: "{{ item.name }}"
        password: "{{ item.pass }}"
        host: "%"
        priv: "{{ item.priv }}"
        state: present
        login_user: root
        login_password: "ElAdmin1853"
      loop:
        - { name: myuser, pass: securepassword, priv: "testdb.*:ALL" }
        - { name: mysql_user2, pass: readpassword, priv: "testdb.*:SELECT" }
        - { name: mysql_user3, pass: writepassword, priv: "testdb.*:INSERT,UPDATE" }

    - name: Crear grupo ACL para administradores MySQL
      group:
        name: mysqladmins
        state: present

    - name: Establecer secure_file_priv para exportaciones
      lineinfile:
        path: /etc/mysql/mysql.conf.d/mysqld.cnf
        regexp: '^secure_file_priv'
        line: 'secure_file_priv = /var/lib/mysql-files'
      notify: Restart MySQL

    - name: Configurar UFW - permitir SSH y MySQL
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop: [22, 3306]

    - name: Verificar si el plugin audit_log está instalado
      mysql_query:
        query: "SHOW PLUGINS"
        login_user: root
        login_password: "ElAdmin1853"
      register: audit_log_status
      ignore_errors: yes

    - name: Instalar plugin de auditoría si no está instalado
      mysql_query:
        query: "INSTALL PLUGIN audit_log SONAME 'audit_log.so';"
        login_user: root
        login_password: "ElAdmin1853"
      when: audit_log_status.query_result is defined and audit_log_status.query_result | length == 0
      ignore_errors: yes

    - name: Crear archivo de log de auditoría
      file:
        path: /var/log/mysql/audit.log
        state: touch
        owner: mysql
        group: adm
        mode: '0640'
      when: install_audit_log_result is defined and install_audit_log_result.changed

    - name: Configurar auditoría en mysqld.cnf
      blockinfile:
        path: /etc/mysql/mysql.conf.d/mysqld.cnf
        block: |
          audit_log_file = /var/log/mysql/audit.log
          audit_log_format = JSON
          audit_log_policy = ALL
      notify: Restart MySQL
      when: install_audit_log_result is defined and install_audit_log_result.changed

    - name: Verificar que el plugin audit_log esté activo
      mysql_query:
        query: "SHOW VARIABLES LIKE 'audit_log%'"
        login_user: root
        login_password: "ElAdmin1853"
      register: audit_log_vars

    - name: Mostrar estado del plugin audit_log
      debug:
        msg: "Audit log plugin status: {{ audit_log_vars.query_result }}"

  handlers:
    - name: Restart MySQL
      service:
        name: mysql
        state: restarted
      when: install_audit_log_result.changed